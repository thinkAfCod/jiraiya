// Code generated by fastssz. DO NOT EDIT.
// Hash: 4bc60c8d71aa4c80d75c17d507bfdcb55f1859205f57e687aa269210cd4336dc
// Version: 0.1.3
package net

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PingPongCustomData object
func (p *PingPongCustomData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PingPongCustomData object to a target array
func (p *PingPongCustomData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Radius'
	if size := len(p.Radius); size != 32 {
		err = ssz.ErrBytesLengthFn("PingPongCustomData.Radius", size, 32)
		return
	}
	dst = append(dst, p.Radius...)

	return
}

// UnmarshalSSZ ssz unmarshals the PingPongCustomData object
func (p *PingPongCustomData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 32 {
		return ssz.ErrSize
	}

	// Field (0) 'Radius'
	if cap(p.Radius) == 0 {
		p.Radius = make([]byte, 0, len(buf[0:32]))
	}
	p.Radius = append(p.Radius, buf[0:32]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PingPongCustomData object
func (p *PingPongCustomData) SizeSSZ() (size int) {
	size = 32
	return
}

// HashTreeRoot ssz hashes the PingPongCustomData object
func (p *PingPongCustomData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PingPongCustomData object with a hasher
func (p *PingPongCustomData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Radius'
	if size := len(p.Radius); size != 32 {
		err = ssz.ErrBytesLengthFn("PingPongCustomData.Radius", size, 32)
		return
	}
	hh.PutBytes(p.Radius)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PingPongCustomData object
func (p *PingPongCustomData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the Ping object
func (p *Ping) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the Ping object to a target array
func (p *Ping) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'EnrSeq'
	dst = ssz.MarshalUint64(dst, p.EnrSeq)

	// Offset (1) 'CustomPayload'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.CustomPayload)

	// Field (1) 'CustomPayload'
	if size := len(p.CustomPayload); size > 2048 {
		err = ssz.ErrBytesLengthFn("Ping.CustomPayload", size, 2048)
		return
	}
	dst = append(dst, p.CustomPayload...)

	return
}

// UnmarshalSSZ ssz unmarshals the Ping object
func (p *Ping) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'EnrSeq'
	p.EnrSeq = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'CustomPayload'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'CustomPayload'
	{
		buf = tail[o1:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(p.CustomPayload) == 0 {
			p.CustomPayload = make([]byte, 0, len(buf))
		}
		p.CustomPayload = append(p.CustomPayload, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Ping object
func (p *Ping) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'CustomPayload'
	size += len(p.CustomPayload)

	return
}

// HashTreeRoot ssz hashes the Ping object
func (p *Ping) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the Ping object with a hasher
func (p *Ping) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'EnrSeq'
	hh.PutUint64(p.EnrSeq)

	// Field (1) 'CustomPayload'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(p.CustomPayload))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(p.CustomPayload)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Ping object
func (p *Ping) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}

// MarshalSSZ ssz marshals the Pong object
func (p *Pong) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the Pong object to a target array
func (p *Pong) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Field (0) 'EnrSeq'
	dst = ssz.MarshalUint64(dst, p.EnrSeq)

	// Offset (1) 'CustomPayload'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(p.CustomPayload)

	// Field (1) 'CustomPayload'
	if size := len(p.CustomPayload); size > 2048 {
		err = ssz.ErrBytesLengthFn("Pong.CustomPayload", size, 2048)
		return
	}
	dst = append(dst, p.CustomPayload...)

	return
}

// UnmarshalSSZ ssz unmarshals the Pong object
func (p *Pong) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'EnrSeq'
	p.EnrSeq = ssz.UnmarshallUint64(buf[0:8])

	// Offset (1) 'CustomPayload'
	if o1 = ssz.ReadOffset(buf[8:12]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'CustomPayload'
	{
		buf = tail[o1:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(p.CustomPayload) == 0 {
			p.CustomPayload = make([]byte, 0, len(buf))
		}
		p.CustomPayload = append(p.CustomPayload, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Pong object
func (p *Pong) SizeSSZ() (size int) {
	size = 12

	// Field (1) 'CustomPayload'
	size += len(p.CustomPayload)

	return
}

// HashTreeRoot ssz hashes the Pong object
func (p *Pong) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the Pong object with a hasher
func (p *Pong) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'EnrSeq'
	hh.PutUint64(p.EnrSeq)

	// Field (1) 'CustomPayload'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(p.CustomPayload))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(p.CustomPayload)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Pong object
func (p *Pong) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
