// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -destination mock/storage_mock.go -package mock -source storage.go ContentKey,ContentStore
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	api "github.com/optimism-java/jiraiya/internal/api"
	net "github.com/optimism-java/jiraiya/internal/net"
	gomock "go.uber.org/mock/gomock"
)

// MockContentKey is a mock of ContentKey interface.
type MockContentKey struct {
	ctrl     *gomock.Controller
	recorder *MockContentKeyMockRecorder
}

// MockContentKeyMockRecorder is the mock recorder for MockContentKey.
type MockContentKeyMockRecorder struct {
	mock *MockContentKey
}

// NewMockContentKey creates a new mock instance.
func NewMockContentKey(ctrl *gomock.Controller) *MockContentKey {
	mock := &MockContentKey{ctrl: ctrl}
	mock.recorder = &MockContentKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentKey) EXPECT() *MockContentKeyMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockContentKey) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockContentKeyMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockContentKey)(nil).Bytes))
}

// ContentId mocks base method.
func (m *MockContentKey) ContentId() [32]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentId")
	ret0, _ := ret[0].([32]byte)
	return ret0
}

// ContentId indicates an expected call of ContentId.
func (mr *MockContentKeyMockRecorder) ContentId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentId", reflect.TypeOf((*MockContentKey)(nil).ContentId))
}

// Hex mocks base method.
func (m *MockContentKey) Hex() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hex")
	ret0, _ := ret[0].(string)
	return ret0
}

// Hex indicates an expected call of Hex.
func (mr *MockContentKeyMockRecorder) Hex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hex", reflect.TypeOf((*MockContentKey)(nil).Hex))
}

// MockContentStore is a mock of ContentStore interface.
type MockContentStore[K net.ContentKey, V []byte] struct {
	ctrl     *gomock.Controller
	recorder *MockContentStoreMockRecorder[K, V]
}

// MockContentStoreMockRecorder is the mock recorder for MockContentStore.
type MockContentStoreMockRecorder[K net.ContentKey, V []byte] struct {
	mock *MockContentStore[K, V]
}

// NewMockContentStore creates a new mock instance.
func NewMockContentStore[K net.ContentKey, V []byte](ctrl *gomock.Controller) *MockContentStore[K, V] {
	mock := &MockContentStore[K, V]{ctrl: ctrl}
	mock.recorder = &MockContentStoreMockRecorder[K, V]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentStore[K, V]) EXPECT() *MockContentStoreMockRecorder[K, V] {
	return m.recorder
}

// Get mocks base method.
func (m *MockContentStore[K, V]) Get(key K) (V, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(V)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContentStoreMockRecorder[K, V]) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContentStore[K, V])(nil).Get), key)
}

// IsKeyWithinRadiusAndUnavailable mocks base method.
func (m *MockContentStore[K, V]) IsKeyWithinRadiusAndUnavailable(key K) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyWithinRadiusAndUnavailable", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKeyWithinRadiusAndUnavailable indicates an expected call of IsKeyWithinRadiusAndUnavailable.
func (mr *MockContentStoreMockRecorder[K, V]) IsKeyWithinRadiusAndUnavailable(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyWithinRadiusAndUnavailable", reflect.TypeOf((*MockContentStore[K, V])(nil).IsKeyWithinRadiusAndUnavailable), key)
}

// Put mocks base method.
func (m *MockContentStore[K, V]) Put(key K, value V) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockContentStoreMockRecorder[K, V]) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockContentStore[K, V])(nil).Put), key, value)
}

// Radius mocks base method.
func (m *MockContentStore[K, V]) Radius() *api.Distance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Radius")
	ret0, _ := ret[0].(*api.Distance)
	return ret0
}

// Radius indicates an expected call of Radius.
func (mr *MockContentStoreMockRecorder[K, V]) Radius() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Radius", reflect.TypeOf((*MockContentStore[K, V])(nil).Radius))
}
